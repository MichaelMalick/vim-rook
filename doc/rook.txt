*rook.txt* Evaluate R code in a tmux pane or neovim terminal


==============================================================================
VIM-ROOK                                                            *vim-rook*

Lightweight plugin for evaluating R code in a tmux pane or neovim terminal.


==============================================================================
COMMANDS                                                       *rook-commands*

:Rattach [args]     Specify a target tmux pane or neovim terminal buffer to
                    evaluate code in. For tmux, the format of [args] needs to
                    be: `session_name:window_name.pane_index`  (e.g.,
                    `sess:win.1`). For neovim, [args] should be a buffer name.
                    Tab completion can be used to specify the target for both
                    neovim and tmux targets. When running neovim, `Rattach`
                    assumes the target is a neovim terminal buffer (even if
                    neovim is running inside tmux). When running vim,
                    `Rattach` assumes the target is a tmux pane. This
                    behaviour can be changed by setting the
                    `g:rook_target_type` variable (see |rook-configurations|).

                    When the `Rattach` command is called, the attached target
                    is set to be buffer local, meaning that a different target
                    pane/terminal can be specified for each R filetype buffer.
                    If only one unique target pane/terminal has been set, all
                    R filetype buffers will automatically be set to send to
                    this target (this inheritance occurs for vim buffers with
                    file extensions `*.r,*.R,*.rmd,*.Rmd,*.rnw,*.Rnw`). If
                    more than one unique target has been set (i.e., `Rattach`
                    has been called at least twice with two different targets
                    specified) then targets for all new R filetype buffers
                    will need to be set manually by calling `Rattach`. The
                    selected target for a buffer is remembered throughout the
                    vim/neovim editing session and the buffer target can be
                    changed by calling `Rattach` again. 
                    
:Rwrite [args]      Given an argument, take the text given in [args] and send
                    it to the target R console, e.g., `:Rwrite ls()` will send
                    the `ls()` command to be evaluated.

:[range]Rwrite      Given a range, take the text given in [range] and send it
                    to the target R console to be evaluated.

:Rwrite             With neither a range or an argument, send the current line
                    to the target R console to be evaluated.

:Rhelp[args]        Given an R function name as [args], split the current
                    window and open the associated R help file in a new vim
                    buffer. A new buffer is created for each unique function
                    that is looked up. The command uses the R `help()`
                    function with the `package` argument set to NULL. To get
                    help for a function in a specific package, you can use the
                    `::` notation; `package::function`. For example, to view
                    the R help file for the `image` function in the `raster`
                    package, use `raster::image`. Tab completion of function
                    names is provided for most of the functions that are
                    distributed with R (e.g., functions in the base, MASS,
                    and graphics). Tab completion of functions from packages
                    not distributed with R (e.g., ggplot, dplyr) is not
                    provided.

:Rhelp              Given no arguments, the word under the cursor is used to
                    populate the `help()` function argument. If the cursor is
                    over a `:` when `Rhelp` is called with no arguments,
                    `Rhelp` assumes the cursor is in a `package::function`
                    statement and will attempt to get help for `function` in
                    `package`.

:Rview[args]        Given an R function as [args], wrap the word under the
                    cursor in the [args] function name and evaluate it in the
                    target R console. For example `:Rview head` will send
                    `head(<cword>)` to be evaluated in R. Tab completion of
                    function names is available.

:Rview              Given no arguments, the previous function supplied to
                    `:Rview` is used.

Rook does not have a built-in command to create a new target R session in
a split. If you want to automate starting and attaching a new target R session
in a split, you can use the `rook#rstart()` function. For example, the
following will create an `:Rstart` command that will create and attach a new
target in a horizontal split below the current buffer:

    if has('nvim')
        " neovim
        command! Rstart call rook#rstart('belowright 25new')
    else
        " tmux
        command! Rstart call rook#rstart('tmux split-window -v -p 35')
    endif

In neovim, the argument supplied to the `rook#rstart()` function should create
a new window, e.g., `new`, `vnew`, or `tabnew`. For tmux, the argument should
create a new pane, e.g., `split-window`, or `new-window`.


==============================================================================
GLOBAL PLUGIN                                                    *rook-global*

Rook.vim is set up to be a global plugin because R code can appear in numerous
filetypes (e.g., markdown, pandoc, rmd, rnw, latex). This means that the above
commands are available in all vim filetypes. All rook.vim functions are lazy
loaded, so there should be no startup penalty to having rook.vim installed if
you don't use it for certain filetypes.


==============================================================================
MAPPINGS                                                       *rook-mappings*

Rook does not provide any mappings. If you want to send code from a vim buffer
to the selected R console, add the following mappings to your .vimrc:

    xmap gl  <Plug>RookSend      " Send selected text
    nmap gl  <Plug>RookSend      " Send motion/text object
    nmap gll <Plug>RookSendLine  " Send current line

To send the current line, use `gll`. Use `gl` followed by a motion to send the
motion target, e.g., `glip` will send a paragraph. In visual mode, use `gl` to
send the current selection.

If you want key mappings to evaluate frequently used commands (with path
expansion), you can use the rook#send_text function. For example, the
following mapping will source the current file in the target R session:

    nnoremap <silent> <leader>rs :call 
        \ rook#send_text('source("' . expand('%:p') . '")')<CR>

A text object for R functions is also provided. To map `af` to send an
R function to the attached R session, add the following to your .vimrc:

    xmap af <Plug>RookRFunctionVisual
    omap af <Plug>RookRFunctionPending

To send the R function the cursor is in, use `glaf`.

Because rook.vim is defined as a global plugin, the above mappings would be
avialable in all vim filetypes. If you want mappings to only be created for
certain filetypes, use an |autocommand| in your .vimrc:

    augroup rook_mappings
        autocmd!
        au FileType r,rmd,rnoweb xmap <buffer> af <Plug>RookRFunctionVisual
        au FileType r,rmd,rnoweb omap <buffer> af <Plug>RookRFunctionPending
    augroup END

The above autocommand limits the function text object mappings to only be set
for `r`, `rmd`, and `rnoweb` filetypes.


==============================================================================
CONFIGURATIONS                                           *rook-configurations*

You can change the following settings to control how Rook works.

------------------------------------------------------------------------------
g:rook_target_type

By default, if you are running neovim, rook.vim assumes the target R console
is a neovim terminal buffer (even if neovim is running inside tmux) and if you
are running vim, the target is assumed to be running in a tmux pane. If you
want to use a tmux pane as the target when running neovim, set this variable
to 'tmux', e.g., put the following in you .vimrc file:

    let g:rook_target_type = 'tmux'

------------------------------------------------------------------------------
g:rook_tmp_file                          default: file output from tmpname()

Set this to change the location of the temporary file Rook uses to send
commands (needs a full path):

    let g:rook_tmp_file = "/tmp/vim-rook-tmp-file"

------------------------------------------------------------------------------
g:rook_source_send                                                default: 1

When set to 0, sent selections, paragraphs, etc. will be sent line wise, that
is, each line will appear in the selected target R console. This can be slow
if sending a large number of lines. If set to 1 (the default), sent text in
excess of a single line is evaluated using the source() function in R. This is
a much faster way to send large chunks of code, however, the sent code is not
viewable in R.

------------------------------------------------------------------------------
g:rook_rstudio_folding                                            default: 0

When set to 1, code folding imitates RStudio style folding/sections. Three
syntax variants can be used to create a fold; in each variant the marker line
starts with a `#` and ends with four consecutive `#`, `=`, or `-`.

`# syntax 1 ####`
`# syntax 2 ====`
`# syntax 3 ----`

RStudio does not have nested folding, therefore, each of the three different
syntaxes represent a level-1 fold within the file.

When set, RStudio style folding is limited to buffers with filetype=r. When
this variable is set to 0 (the default) the user defined default folding
method is used.


==============================================================================
BUGS                                                               *rook-bugs*

If you find a bug, please post it on the issue tracker:
http://github.com/michaelmalick/vim-rook/issues/


==============================================================================
LICENSE                                                         *rook-license*

MIT/X11


vim:tw=78:et:ft=help:norl:nowrap:
